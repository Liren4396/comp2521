Input      Initial    Number     AvgTime            AvgTime
Size       Order      of Runs    for sortIntList    for sort
10000      random     5          0.50               0.01
10000      sorted     5          0.00               0.00
10000      reverse    5          0.00               0.00
20000      random     5          2.44               0.02
20000      sorted     5          0.00               0.01
20000      reverse    5          0.01               0.01
50000      random     5          14.66              0.05
50000      sorted     5          0.03               0.02
50000      reverse    5          0.03               0.02
100000     random     5                             0.05
100000     sorted     5          0.05               0.05
100000     reverse    5          0.05               0.05
200000     random     5                             0.13
200000     sorted     5          0.12               0.13
200000     reverse    5          0.12               0.14
500000     random     5                             0.35
500000     sorted     5          0.30               0.34
500000     reverse    5          0.31               0.37
1000000    random     5                             0.65
1000000    sorted     5          0.55               0.64
1000000    reverse    5          0.54               0.68



Explanation of timing results:
the sort commands use the merge sort algorithm to deal with the specific program.
perfect time complexity I think.O(nlog(n)). merge sort unstable

Sort compares each line of a file as a unit, starting with the first character, then the ASCII code value, 
and finally printing them in ascending order .

sortIntList's time complexity best case is O(n) and average case is O(n^2) worst case O(n^2).
This uses a classic algorithm----Insertion Sort.stable

So the reverse and sort is the best case for sortintlist.
when executed in void IntListInsertInOrder(IntList l, int v), it is always head insert, no more loop.




